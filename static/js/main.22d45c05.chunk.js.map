{"version":3,"sources":["images/head.png","images/tail.png","Coin.js","CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","alt","this","props","info","side","src","imgSrc","Component","CoinContainer","state","currCoin","numFlip","numTails","numHeads","handleClick","bind","arr","newCoin","coins","Math","floor","random","length","setState","st","e","flipCoin","className","onClick","defaultProps","require","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,yHCY5BC,E,uKARP,OACI,6BACI,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,KAAMC,IAAKJ,KAAKC,MAAMC,KAAKG,c,GAJlDC,a,UCGbC,E,kDAOF,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,SAAU,KACVC,QAAS,EACTC,SAAU,EACVC,SAAU,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARL,E,uDAYd,ICxBYC,EDwBNC,GCxBMD,EDwBef,KAAKC,MAAMgB,OCvB9BC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,SDwBvCrB,KAAKsB,UAAS,SAAAC,GACV,MAAO,CACHd,SAAUO,EACVN,QAASa,EAAGb,QAAU,EACtBC,SAAUY,EAAGZ,UAA6B,SAAjBK,EAAQb,KAAkB,EAAI,GACvDS,SAAUW,EAAGX,UAA6B,SAAjBI,EAAQb,KAAkB,EAAI,S,kCAKvDqB,GACRxB,KAAKyB,a,+BAIL,OACI,yBAAKC,UAAU,iBACX,yCACC1B,KAAKQ,MAAMC,UAAY,kBAAC,EAAD,CAAMP,KAAQF,KAAKQ,MAAMC,WACjD,4BAAQkB,QAAW3B,KAAKa,aAAxB,kBACA,sCAAYb,KAAKQ,MAAME,SACvB,sCAAYV,KAAKQ,MAAMI,UACvB,sCAAYZ,KAAKQ,MAAMG,e,GA1CXL,aAAtBC,EACKqB,aAAe,CAClBX,MAAO,CACH,CAACd,KAAM,OAAQE,OAAQwB,EAAQ,KAC/B,CAAC1B,KAAM,OAAQE,OAAQwB,EAAQ,OA4C5BtB,QEzCAuB,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22d45c05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/head.87cfaa04.png\";","module.exports = __webpack_public_path__ + \"static/media/tail.70f8c7f3.png\";","import React, { Component } from 'react';\n\nclass Coin extends Component{\n    render(){\n        return(\n            <div>\n                <img alt={this.props.info.side} src={this.props.info.imgSrc} />\n            </div>\n        )\n    }\n}\n\nexport default Coin;","import React, { Component } from 'react';\nimport Coin from './Coin'\nimport {randomCoin} from './helpers';\nimport './CoinContainer.css';\n\nclass CoinContainer extends Component{\n    static defaultProps = {\n        coins: [\n            {side: 'head', imgSrc: require('./images/head.png')},\n            {side: 'tail', imgSrc: require('./images/tail.png')}\n        ]\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            currCoin: null,\n            numFlip: 0,\n            numTails: 0,\n            numHeads: 0\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    flipCoin(){\n        const newCoin = randomCoin(this.props.coins);\n        this.setState(st => {\n            return {\n                currCoin: newCoin,\n                numFlip: st.numFlip + 1,\n                numTails: st.numTails + (newCoin.side === 'tail' ? 1 : 0),\n                numHeads: st.numHeads + (newCoin.side === 'head' ? 1 : 0)\n            }\n        })\n    }\n\n    handleClick(e){\n        this.flipCoin();\n    }\n\n    render(){\n        return(\n            <div className='CoinContainer'>\n                <h1>Kara Krus</h1>\n                {this.state.currCoin && <Coin info = {this.state.currCoin} />}\n                <button onClick = {this.handleClick}>Flip the Coin!</button>\n                <h3>Flips: {this.state.numFlip}</h3>\n                <h3>Heads: {this.state.numHeads}</h3>\n                <h3>Tails: {this.state.numTails}</h3>\n            </div>\n        )\n    }\n}\n\nexport default CoinContainer;","function randomCoin(arr){\n    const idx = Math.floor(Math.random() * arr.length)\n    return arr[idx];\n}\n\nexport {randomCoin};","import React from 'react';\nimport './App.css';\nimport CoinContainer from './CoinContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}